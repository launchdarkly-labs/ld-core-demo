name: Update Demo Environment to latest version

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'User alias or LD env key'
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  ECR_REPOSITORY: ld-core-demo
  KUBECTL_VERSION: "v1.23.0"
  LD_API_KEY: ${{ secrets.LD_API_KEY }} 
  DEMO_NAMESPACE: ${{ github.event.inputs.name }}

jobs:
  update-demo-env:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./.github/workflows/requirements.txt

      - name: Install LaunchDarkly CLI
        run: npm install -g @launchdarkly/ldcli

      - name: LD CLI Configure
        run: ldcli config --set access-token ${{ secrets.LD_API_KEY }}

      - name: Get LD Project Client/SDK Keys
        id: create_ld_project
        env:
          LD_API_KEY: ${{ secrets.LD_API_KEY }}
          NAMESPACE: ${{ env.DEMO_NAMESPACE }}
        run: |
          echo "Creating LaunchDarkly project for namespace: ${{ env.DEMO_NAMESPACE }}"
          python ./.github/workflows/ld_api/create_ld_project.py
      
      - name: Apply Demo Env Update
        run: python ./.github/workflows/update_resources/update_ld_project.py ${{ env.DEMO_NAMESPACE }}

      - name: Create .env file
        run: |
          touch ./.env.production
          echo NEXT_PUBLIC_LD_CLIENT_KEY=${{ env.LD_CLIENT_KEY }} >> ./.env.production
          echo LD_SDK_KEY=${{ env.LD_SDK_KEY }} >> ./.env.production
          echo DB_URL=${{ secrets.DB_URL }} >> ./.env.production
          echo LD_API_KEY=${{ secrets.LD_API_KEY }} >> ./.env.production
          echo DESTINATIONENV=${{ env.DEMO_NAMESPACE }} >> ./.env.production
          echo PROJECT_KEY=${{ env.DEMO_NAMESPACE }}-ld-demo >> ./.env.production
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ld-core-demo
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.DEMO_NAMESPACE }}-${{ github.run_id }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.DEMO_NAMESPACE }}-${{ github.run_id }}

      - name: Update K8s Deploy File
        run: python ./.github/workflows/update_k8s_deploy_file.py
        env:
          NAMESPACE: ${{ env.DEMO_NAMESPACE }}
          URL: ${{ env.DEMO_NAMESPACE }}.launchdarklydemos.com
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/ld-core-demo:${{ env.DEMO_NAMESPACE }}-${{ github.run_id }}

      - name: Check Namespace in Kubernetes
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: get namespace ${{ env.DEMO_NAMESPACE }} &>/dev/null && echo "namespace_exists=true" >> $GITHUB_ENV || echo "namespace_exists=false" >> $GITHUB_ENV

      - name: Create Namespace In Kubernetes
        if: env.namespace_exists == 'false'
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: create namespace ${{ env.DEMO_NAMESPACE }}

      - name: Applying deploy file to Kubernetes
        uses: kodermax/kubectl-aws-eks@master
        with:
          args: apply -f ./.github/workflows/deploy_files/deploy.yaml -n ${{ env.DEMO_NAMESPACE }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 11

      - name: LaunchDarkly Code References
        uses: launchdarkly/find-code-references@v2
        with:
          accessToken: ${{ secrets.LD_API_KEY }}
          projKey: ${{ env.DEMO_NAMESPACE }}-ld-demo


      
